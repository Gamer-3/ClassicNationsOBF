-- Load the Vision UI Library
local Library = loadstring(game:HttpGet('https://raw.githubusercontent.com/Loco-CTO/UI-Library/main/VisionLibV2/source.lua'))()

-- Create the main window
local Window = Library:Create({
    Name = "Classic Nations (Public Version)",
    Footer = "By luckyCamen (version: 2.0)",
    ToggleKey = Enum.KeyCode.RightShift,
    LoadedCallback = function()
        Window:TaskBarOnly(false)
    end,
    KeySystem = true,
    Key = "XyZ7-8!aB-cD9e-F0gH",
    MaxAttempts = 3,
    DiscordLink = nil,
    ToggledRelativeYOffset = 0
})

Window:ChangeTogglekey(Enum.KeyCode.RightShift)

-- Create Tabs
local MainTab = Window:Tab({
    Name = "Main",
    Icon = "rbxassetid://11396131982",
    Color = Color3.new(0.474509, 0.474509, 0.474509)
})
local MiscellaneousTab = Window:Tab({
    Name = "Miscellaneous",
    Icon = "rbxassetid://11396131982",
    Color = Color3.new(0.474509, 0.474509, 0.474509)
})

local SettingsTab = Window:Tab({
    Name = "Settings",
    Icon = "rbxassetid://11476626403",
    Color = Color3.new(0.474509, 0.474509, 0.474509)
})

-- Create an Updates Section in the Settings Tab
local UpdatesSection = SettingsTab:Section({
    Name = "Updates"
})

-- Create a label for update messages
UpdatesSection:Label({
    Name = "Updates:",
})

-- Example updates format
local updatesList = {
    "1. Added new features to Legit Mode.",
    "2. Fixed bugs in Blatant Mode.",
    "3. Optimized performance improvements."
}

for _, update in ipairs(updatesList) do
    UpdatesSection:Label({
        Name = update,
    })
end

-- Create Main Section for Legit Mode Controls
local MainSection = MainTab:Section({
    Name = "Main"
})

-- Variables for Legit Mode
local legitModeEnabled = false
local legitMoveSpeed = 16

-- Function to reset player's speed to default
local function resetSpeedToDefault()
    local player = game.Players.LocalPlayer
    local char = player.Character or player.CharacterAdded:Wait()
    local humanoid = char:WaitForChild("Humanoid")
    humanoid.WalkSpeed = 16
end

-- Legit Mode Toggle
MainSection:Toggle({
    Name = "Legit Mode",
    Default = false,
    Callback = function(state)
        legitModeEnabled = state
        if state then
            Library:Notify({
                Name = "Legit Mode",
                Text = "Enabled",
                Icon = "rbxassetid://11401835376",
                Duration = 3,
            })
            while legitModeEnabled do
                wait(1)
                -- Call moveToGlowLegit function (if needed)
                moveToGlowLegit() -- Assuming this function is defined elsewhere
            end
        else
            Library:Notify({
                Name = "Legit Mode",
                Text = "Disabled",
                Icon = "rbxassetid://11401835376",
                Duration = 3,
            })
            resetSpeedToDefault()
        end
    end
})

-- Slider for Speed Control
MainSection:Slider({
    Name = "Legit Speed",
    Default = legitMoveSpeed,
    Min = 0,
    Max = 100,
    Callback = function(value)
        legitMoveSpeed = value
    end
})

-- Create section for Blatant Mode
local BlatantSection = MainTab:Section({
    Name = "Blatant"
})

-- Variables for Blatant Mode
local blatantModeActive = false
local blatantSpeed = 50
local updateInterval = 0.1

-- Function to find the closest collectible with the "Glow" effect
local function findClosestGlow()
    local player = game.Players.LocalPlayer
    local char = player.Character or player.CharacterAdded:Wait()
    local hrp = char:WaitForChild("HumanoidRootPart")

    local closestPart, closestDistance = nil, math.huge
    local buildPack = workspace:FindFirstChild("BuildPack")

    if buildPack then
        for _, folder in pairs(buildPack:GetChildren()) do
            if folder:IsA("Folder") then
                for _, part in pairs(folder:GetChildren()) do
                    if part:IsA("MeshPart") and part:FindFirstChild("Glow") then
                        local distance = (hrp.Position - part.Position).Magnitude
                        if distance < closestDistance then
                            closestDistance = distance
                            closestPart = part
                        end
                    end
                end
            end
        end
    end

    return closestPart
end

-- Blatant Mode Toggle
BlatantSection:Toggle({
    Name = "Blatant Mode",
    Default = false,
    Callback = function(state)
        blatantModeActive = state
        local humanoid = game.Players.LocalPlayer.Character:WaitForChild("Humanoid")
        if state then
            humanoid.WalkSpeed = blatantSpeed
            Library:Notify({
                Name = "Blatant Mode",
                Text = "Enabled",
                Icon = "rbxassetid://11401835376",
                Duration = 3,
            })
            while blatantModeActive do
                wait(updateInterval)
                local player = game.Players.LocalPlayer
                local char = player.Character or player.CharacterAdded:Wait()
                local hrp = char:WaitForChild("HumanoidRootPart")

                local targetMeshPart = findClosestGlow()

                if targetMeshPart then
                    hrp.CFrame = targetMeshPart.CFrame
                end
            end
        else
            resetSpeedToDefault()
            Library:Notify({
                Name = "Blatant Mode",
                Text = "Disabled",
                Icon = "rbxassetid://11401835376",
                Duration = 3,
            })
        end
    end
})

-- Create Server-Side Section in Miscellaneous Tab
local ServerSideSection = MiscellaneousTab:Section({
    Name = "Server-Side"
})

-- Function to disable anti-cheat
local function disableAntiCheat()
    local playerModel = workspace:FindFirstChild(game.Players.LocalPlayer.Name)
    if playerModel then
        local localScript = playerModel:FindFirstChild("ClientBodyMover")
        if localScript and localScript:IsA("LocalScript") then
            localScript:Destroy()
            Library:Notify({
                Name = "Disable AntiCheat",
                Text = "AntiCheat has been disabled.",
                Icon = "rbxassetid://11401835376",
                Duration = 3,
            })
        else
            Library:Notify({
                Name = "Error",
                Text = "AntiCheat not found, Script may be patched.",
                Icon = "rbxassetid://11401835376",
                Duration = 3,
            })
        end
    else
        Library:Notify({
            Name = "Error",
            Text = "Player model not found.",
            Icon = "rbxassetid://11401835376",
            Duration = 3,
        })
    end
end

-- Disable AntiCheat Button
ServerSideSection:Button({
    Name = "Disable AntiCheat",
    Callback = function()
        disableAntiCheat()
    end
})

-- Create "Check for Gamepasses" Section
local CheckGamepassesSection = MiscellaneousTab:Section({
    Name = "Check for Gamepasses"
})

-- Function to refresh player names
local function refreshPlayerNames()
    local playerNames = {}
    for _, player in pairs(game.Players:GetPlayers()) do
        if player.Name ~= game.Players.LocalPlayer.Name then
            table.insert(playerNames, player.Name)
        end
    end
    return playerNames
end

-- Create a dropdown to select a player for gamepass check
CheckGamepassesSection:Dropdown({
    Name = "Select Player",
    Items = refreshPlayerNames(),
    Callback = function(selectedPlayer)
        local targetPlayer = game.Players:FindFirstChild(selectedPlayer)
        if targetPlayer then
            local gamepasses = targetPlayer:FindFirstChild("Gamepasses")
            if gamepasses then
                local bannedWeapons = gamepasses:FindFirstChild("BannedWeapons")
                local resultMessage = "Check for " .. targetPlayer.Name .. ":\n"
                resultMessage = resultMessage .. "BannedWeapons: " .. (bannedWeapons and bannedWeapons.Value and "Owned" or "Not Owned")
                Library:Notify({
                    Name = "Gamepass Check for " .. targetPlayer.Name,
                    Text = resultMessage,
                    Icon = "rbxassetid://11401835376",
                    Duration = 3,
                })
            else
                Library:Notify({
                    Name = "Error",
                    Text = "Gamepasses folder not found for " .. targetPlayer.Name,
                    Icon = "rbxassetid://11401835376",
                    Duration = 3,
                })
            end
        else
            Library:Notify({
                Name = "Error",
                Text = "Player not found.",
                Icon = "rbxassetid://11401835376",
                Duration = 3,
            })
        end
    end
})

-- Create "Teleportation" Section
local TeleportationSection = MiscellaneousTab:Section({
    Name = "Teleportation"
})

-- Create a dropdown to select a player for teleportation
TeleportationSection:Dropdown({
    Name = "Select Player",
    Items = refreshPlayerNames(),
    Callback = function(selectedPlayer)
        local targetPlayer = game.Players:FindFirstChild(selectedPlayer)
        if targetPlayer and targetPlayer.Character then
            local humanoidRootPart = game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
            if humanoidRootPart then
                humanoidRootPart.CFrame = targetPlayer.Character.HumanoidRootPart.CFrame
            end
        else
            Library:Notify({
                Name = "Error",
                Text = "Player not found or their character is not loaded.",
                Icon = "rbxassetid://11401835376",
                Duration = 3,
            })
        end
    end
})

-- Refresh button for the Gamepass Dropdown
CheckGamepassesSection:Button({
    Name = "Refresh Players",
    Callback = function()
        CheckGamepassesSection:DropdownUpdate("Select Player", refreshPlayerNames())
    end
})

-- Refresh button for the Teleport Dropdown
TeleportationSection:Button({
    Name = "Refresh Players",
    Callback = function()
        TeleportationSection:DropdownUpdate("Select Player", refreshPlayerNames())
    end
})

-- Create miscellaneous features in Settings Tab
local Section = SettingsTab:Section({
    Name = "Miscellaneous Features"
})

-- Destroy Library Button
Section:Button({
    Name = "Destroy Library",
    Callback = function()
        Library:Destroy()
    end
})

-- Hide UI Button
Section:Button({
    Name = "Hide UI",
    Callback = function()
        Window:Toggled(false)
        task.wait(3)
        Window:Toggled(true)
    end
})

-- Task Bar Only Button
Section:Button({
    Name = "Task Bar Only",
    Callback = function()
        Window:TaskBarOnly(true)
        task.wait(3)
        Window:TaskBarOnly(false)
    end
})

-- Keybind Example
Section:Keybind({
    Name = "Toggle Keybind",
    Default = Enum.KeyCode.Return,
    Callback = function() return end,
    UpdateKeyCallback = function(Key)
        task.wait(0.1)
        Window:ChangeTogglekey(Key)
    end
})

